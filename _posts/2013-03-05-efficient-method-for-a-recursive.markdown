---
author: abloz
comments: true
date: 2013-03-05 23:23:01+00:00
layout: post
link: http://abloz.com/index.php/2013/03/06/efficient-method-for-a-recursive/
slug: efficient-method-for-a-recursive
title: 一种递归计算的高效方法
wordpress_id: 2150
categories:
- 技术
tags:
- 递归
---

周海汉/文
http://abloz.com
递归计算，有时能非常直观的解决问题，但是非常耗资源，计算很慢，还可能导致堆栈耗尽，计算失败。所以很多时候具体实现时不提倡采用递归，而是将递归转为循环的方式来实现。但这种方式又不直观，容易出错。

有没有一种方法可以即递归，又快速实现，减少运算资源消耗呢?
python中的生成器是一种解决方案。以斐波纳契数列为例：

    
    
    def fibonacci(n):
        a,b=0,1
        for i in xrange(n):
            yield a
            a,b=b,a+b
    
    x=fibonacci(100)
    print list(x)
    
    


$ python fib.py
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258, 1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309, 7540113804746346429, 12200160415121876738L, 19740274219868223167L, 31940434634990099905L, 51680708854858323072L, 83621143489848422977L, 135301852344706746049L, 218922995834555169026L]

另一种方法，更具有通用性，适合任何语言。这是本文重点。
思想精髓是存储递归结果到map映射表中。

本文用python来作为脚本语言：

    
    
    r={}
    def recusive(n):
      # init
      # return exit result
    
      if n in r:
        return r[n]
      else:
        r[n]=f(n-1,n-2 ... )
    


对于fibonacci，实现如下：

    
    
    $ cat fib1.py
    f={}
    def fibonacci(n):
        if n<=0:
            return 0
        if n<=2:
            return 1
        if n in f:
            return f[n]
        f[n]=fibonacci(n-1)+fibonacci(n-2)
        return f[n]
    
    
    
    for i in xrange(100):
        print fibonacci(i)
    
    
    


zhouhh@ubuntu:~$ python fib1.py
0
1
1
2
3
5
8
13
21
34
55
...
83621143489848422977
135301852344706746049
218922995834555169026

参考
[让递归计算速度快一万倍](http://www.shahuwang.com/?p=1567)
